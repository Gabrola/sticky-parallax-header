{"version":3,"sources":["DetailsHeaderFlatList.tsx"],"names":["React","View","Animated","useAnimatedStyle","commonStyles","StickyHeaderFlatList","parseAnimatedColorProp","HeaderBar","useDetailsHeader","DetailsHeaderFlatListInner","props","ref","backgroundColor","contentContainerStyle","data","decelerationRate","enableSafeAreaTopInset","keyExtractor","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeaderBar","renderItem","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","headerTitleContainerAnimatedStyle","renderHeader","scrollViewRef","onScroll","onScrollEndDrag","onMomentumScrollEnd","useImperativeHandle","current","wrapperAnimatedStyle","container","DetailsHeaderFlatList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { FlatList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderFlatList } from '../../primitiveComponents/StickyHeaderFlatList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { DetailsHeaderFlatListProps } from './DetailsHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useDetailsHeader } from './hooks/useDetailsHeader';\n\nfunction DetailsHeaderFlatListInner<ItemT>(\n  props: DetailsHeaderFlatListProps<ItemT>,\n  ref: React.ForwardedRef<FlatList<ItemT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    data,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    keyExtractor,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeaderBar,\n    renderItem,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    headerTitleContainerAnimatedStyle,\n    renderHeader,\n    scrollViewRef,\n    onScroll,\n    onScrollEndDrag,\n    onMomentumScrollEnd,\n  } = useDetailsHeader<FlatList<ItemT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as FlatList<ItemT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          headerTitleContainerAnimatedStyle={headerTitleContainerAnimatedStyle}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.container}>\n        <StickyHeaderFlatList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          data={data}\n          decelerationRate={decelerationRate}\n          keyExtractor={keyExtractor}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onScroll={onScroll}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader}\n          renderItem={renderItem}\n          scrollEventThrottle={scrollEventThrottle}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype DetailsHeaderFlatListType = <ItemT>(\n  props: DetailsHeaderFlatListProps<ItemT> & React.RefAttributes<FlatList<ItemT>>\n) => React.ReactElement;\n\nexport const DetailsHeaderFlatList = React.forwardRef(\n  DetailsHeaderFlatListInner\n) as DetailsHeaderFlatListType;\n"]}