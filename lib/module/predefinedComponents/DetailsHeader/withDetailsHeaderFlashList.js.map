{"version":3,"sources":["withDetailsHeaderFlashList.tsx"],"names":["React","View","Animated","useAnimatedStyle","commonStyles","withStickyHeaderFlashList","parseAnimatedColorProp","HeaderBar","useDetailsFlashListHeader","withDetailsHeaderFlashList","flashListComponent","StickyHeaderFlashList","forwardRef","props","ref","backgroundColor","decelerationRate","enableSafeAreaTopInset","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeaderBar","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","headerTitleContainerAnimatedStyle","renderHeader","scrollViewRef","onScroll","onScrollEndDrag","onMomentumScrollEnd","useImperativeHandle","current","wrapperAnimatedStyle","container"],"mappings":"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","sourcesContent":["import type { FlashList, FlashListProps } from '@shopify/flash-list';\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport type { StickyHeaderFlashListProps } from '../../primitiveComponents/StickyHeaderProps';\nimport { withStickyHeaderFlashList } from '../../primitiveComponents/withStickyHeaderFlashList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { DetailsHeaderFlashListProps } from './DetailsHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useDetailsFlashListHeader } from './hooks/useDetailsFlashListHeader';\n\nexport function withDetailsHeaderFlashList<ItemT>(\n  flashListComponent: React.ComponentClass<FlashListProps<ItemT>>\n) {\n  const StickyHeaderFlashList = withStickyHeaderFlashList(\n    flashListComponent as React.ComponentClass<FlashListProps<ItemT>>\n  ) as (\n    props: StickyHeaderFlashListProps<ItemT> & React.RefAttributes<FlashList<ItemT>>\n  ) => React.ReactElement;\n\n  return React.forwardRef<FlashList<ItemT>, DetailsHeaderFlashListProps<ItemT>>((props, ref) => {\n    const {\n      backgroundColor,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      leftTopIcon,\n      leftTopIconAccessibilityLabel,\n      leftTopIconOnPress,\n      leftTopIconTestID,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeaderBar,\n      rightTopIcon,\n      rightTopIconAccessibilityLabel,\n      rightTopIconOnPress,\n      rightTopIconTestID,\n      scrollEventThrottle = 16,\n      title,\n      titleStyle,\n      ...rest\n    } = props;\n    const {\n      headerTitleContainerAnimatedStyle,\n      renderHeader,\n      scrollViewRef,\n      onScroll,\n      onScrollEndDrag,\n      onMomentumScrollEnd,\n    } = useDetailsFlashListHeader<ItemT>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as FlashList<ItemT>);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            headerTitleContainerAnimatedStyle={headerTitleContainerAnimatedStyle}\n            leftTopIcon={leftTopIcon}\n            leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n            leftTopIconOnPress={leftTopIconOnPress}\n            leftTopIconTestID={leftTopIconTestID}\n            rightTopIcon={rightTopIcon}\n            rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n            rightTopIconOnPress={rightTopIconOnPress}\n            rightTopIconTestID={rightTopIconTestID}\n            title={title}\n            titleStyle={titleStyle}\n          />\n        )}\n        <View style={commonStyles.container}>\n          <StickyHeaderFlashList\n            ref={scrollViewRef}\n            {...rest}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onScroll={onScroll}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScrollEndDrag={onScrollEndDrag}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader}\n            scrollEventThrottle={scrollEventThrottle}\n          />\n        </View>\n      </Animated.View>\n    );\n  });\n}\n"]}