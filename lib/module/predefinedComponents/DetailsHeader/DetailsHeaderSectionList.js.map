{"version":3,"sources":["DetailsHeaderSectionList.tsx"],"names":["React","View","Animated","useAnimatedStyle","commonStyles","StickyHeaderSectionList","parseAnimatedColorProp","HeaderBar","useDetailsHeader","DetailsHeaderSectionListInner","props","ref","backgroundColor","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeaderBar","renderSectionFooter","renderSectionHeader","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","sections","stickySectionHeadersEnabled","title","titleStyle","rest","headerTitleContainerAnimatedStyle","onScroll","onScrollEndDrag","onMomentumScrollEnd","renderHeader","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","container","DetailsHeaderSectionList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { SectionList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderSectionList } from '../../primitiveComponents/StickyHeaderSectionList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { DetailsHeaderSectionListProps } from './DetailsHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useDetailsHeader } from './hooks/useDetailsHeader';\n\nfunction DetailsHeaderSectionListInner<ItemT, SectionT>(\n  props: DetailsHeaderSectionListProps<ItemT, SectionT>,\n  ref: React.ForwardedRef<SectionList<ItemT, SectionT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeaderBar,\n    renderSectionFooter,\n    renderSectionHeader,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    sections,\n    stickySectionHeadersEnabled = true,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    headerTitleContainerAnimatedStyle,\n    onScroll,\n    onScrollEndDrag,\n    onMomentumScrollEnd,\n    renderHeader,\n    scrollViewRef,\n  } = useDetailsHeader<SectionList<ItemT, SectionT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as SectionList<ItemT, SectionT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          headerTitleContainerAnimatedStyle={headerTitleContainerAnimatedStyle}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.container}>\n        <StickyHeaderSectionList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          decelerationRate={decelerationRate}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScroll={onScroll}\n          onScrollEndDrag={onScrollEndDrag}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader}\n          renderSectionFooter={renderSectionFooter}\n          renderSectionHeader={renderSectionHeader}\n          scrollEventThrottle={scrollEventThrottle}\n          sections={sections}\n          stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype DetailsHeaderSectionListType = <ItemT, SectionT>(\n  props: DetailsHeaderSectionListProps<ItemT, SectionT> &\n    React.RefAttributes<SectionList<ItemT, SectionT>>\n) => React.ReactElement;\n\nexport const DetailsHeaderSectionList = React.forwardRef(\n  DetailsHeaderSectionListInner\n) as DetailsHeaderSectionListType;\n"]}