{"version":3,"sources":["AvatarHeaderScrollView.tsx"],"names":["AvatarHeaderScrollView","React","forwardRef","props","ref","backgroundColor","children","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","image","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeaderBar","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","renderHeader","scrollValue","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","wrapper"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { ScrollView } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderScrollView } from '../../primitiveComponents/StickyHeaderScrollView';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderScrollViewProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarHeader } from './hooks/useAvatarHeader';\n\nexport const AvatarHeaderScrollView = React.forwardRef<ScrollView, AvatarHeaderScrollViewProps>(\n  (props, ref) => {\n    const {\n      backgroundColor,\n      children,\n      contentContainerStyle,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      image,\n      leftTopIcon,\n      leftTopIconAccessibilityLabel,\n      leftTopIconOnPress,\n      leftTopIconTestID,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeaderBar,\n      rightTopIcon,\n      rightTopIconAccessibilityLabel,\n      rightTopIconOnPress,\n      rightTopIconTestID,\n      scrollEventThrottle = 16,\n      title,\n      titleStyle,\n      ...rest\n    } = props;\n    const {\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      parallaxHeight,\n      renderHeader,\n      scrollValue,\n      scrollViewRef,\n    } = useAvatarHeader<ScrollView>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as ScrollView);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            height={parallaxHeight}\n            image={image}\n            leftTopIcon={leftTopIcon}\n            leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n            leftTopIconOnPress={leftTopIconOnPress}\n            leftTopIconTestID={leftTopIconTestID}\n            rightTopIcon={rightTopIcon}\n            rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n            rightTopIconOnPress={rightTopIconOnPress}\n            rightTopIconTestID={rightTopIconTestID}\n            scrollValue={scrollValue}\n            title={title}\n            titleStyle={titleStyle}\n          />\n        )}\n        <View style={commonStyles.wrapper}>\n          <StickyHeaderScrollView\n            ref={scrollViewRef}\n            {...rest}\n            contentContainerStyle={contentContainerStyle}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScrollEndDrag={onScrollEndDrag}\n            onScroll={onScroll}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader}\n            scrollEventThrottle={scrollEventThrottle}>\n            {children}\n          </StickyHeaderScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n);\n"]}