{"version":3,"sources":["AvatarHeaderFlatList.tsx"],"names":["AvatarHeaderFlatListInner","props","ref","backgroundColor","contentContainerStyle","data","decelerationRate","enableSafeAreaTopInset","image","keyExtractor","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeaderBar","renderItem","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","renderHeader","scrollValue","scrollViewRef","React","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","wrapper","AvatarHeaderFlatList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { FlatList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderFlatList } from '../../primitiveComponents/StickyHeaderFlatList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderFlatListProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarHeader } from './hooks/useAvatarHeader';\n\nfunction AvatarHeaderFlatListInner<ItemT>(\n  props: AvatarHeaderFlatListProps<ItemT>,\n  ref: React.ForwardedRef<FlatList<ItemT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    data,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    image,\n    keyExtractor,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeaderBar,\n    renderItem,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    onMomentumScrollEnd,\n    onScroll,\n    onScrollEndDrag,\n    parallaxHeight,\n    renderHeader,\n    scrollValue,\n    scrollViewRef,\n  } = useAvatarHeader<FlatList<ItemT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as FlatList<ItemT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          height={parallaxHeight}\n          image={image}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          scrollValue={scrollValue}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.wrapper}>\n        <StickyHeaderFlatList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          data={data}\n          decelerationRate={decelerationRate}\n          keyExtractor={keyExtractor}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          onScroll={onScroll}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader}\n          renderItem={renderItem}\n          scrollEventThrottle={scrollEventThrottle}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype AvatarHeaderFlatListType = <ItemT>(\n  props: AvatarHeaderFlatListProps<ItemT> & React.RefAttributes<FlatList<ItemT>>\n) => React.ReactElement;\n\nexport const AvatarHeaderFlatList = React.forwardRef(\n  AvatarHeaderFlatListInner\n) as AvatarHeaderFlatListType;\n"]}