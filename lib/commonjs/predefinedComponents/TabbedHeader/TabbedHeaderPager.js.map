{"version":3,"sources":["TabbedHeaderPager.tsx"],"names":["TabbedHeaderPager","React","forwardRef","props","ref","backgroundColor","children","contentContainerStyle","disableScrollToPosition","decelerationRate","enableSafeAreaTopInset","initialPage","logo","logoContainerStyle","logoResizeMode","logoStyle","nestedScrollEnabled","onChangeTab","overScrollMode","pagerProps","rememberTabScrollPosition","renderHeaderBar","scrollEventThrottle","rest","currentPage","innerScrollHeight","onHorizontalPagerScroll","onMomentumScrollEnd","onScroll","onScrollEndDrag","renderHeader","renderTabs","scrollHeight","scrollValue","scrollViewRef","setCurrentPage","useImperativeHandle","current","wrapperAnimatedStyle","handleChangeTab","useCallback","prevPage","newPage","handleScroll","e","commonStyles","container","stretch"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { NativeScrollEvent, ScrollView } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle, useWorkletCallback } from 'react-native-reanimated';\nimport type { Edge } from 'react-native-safe-area-context';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderScrollView } from '../../primitiveComponents/StickyHeaderScrollView';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { TabbedHeaderPagerProps } from './TabbedHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { Pager } from './components/Pager';\nimport { useTabbedHeaderPager } from './hooks/useTabbedHeader';\n\nexport const TabbedHeaderPager = React.forwardRef<ScrollView, TabbedHeaderPagerProps>(\n  (props, ref) => {\n    const {\n      backgroundColor,\n      children,\n      contentContainerStyle,\n      disableScrollToPosition,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      initialPage,\n      logo,\n      logoContainerStyle,\n      logoResizeMode,\n      logoStyle,\n      nestedScrollEnabled = true,\n      onChangeTab,\n      overScrollMode = 'never',\n      pagerProps,\n      rememberTabScrollPosition,\n      renderHeaderBar,\n      scrollEventThrottle = 16,\n      ...rest\n    } = props;\n    const {\n      currentPage,\n      innerScrollHeight,\n      onHorizontalPagerScroll,\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      renderHeader,\n      renderTabs,\n      scrollHeight,\n      scrollValue,\n      scrollViewRef,\n      setCurrentPage,\n    } = useTabbedHeaderPager(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as ScrollView);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    const handleChangeTab = React.useCallback(\n      (prevPage: number, newPage: number) => {\n        setCurrentPage(newPage);\n        onChangeTab?.(prevPage, newPage);\n      },\n      [onChangeTab, setCurrentPage]\n    );\n\n    const handleScroll = useWorkletCallback(\n      (e: NativeScrollEvent) => {\n        onHorizontalPagerScroll(e);\n        pagerProps?.onScroll?.(e);\n      },\n      [onHorizontalPagerScroll, pagerProps?.onScroll]\n    );\n\n    return (\n      <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : logo ? (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            logo={logo}\n            logoContainerStyle={logoContainerStyle}\n            logoResizeMode={logoResizeMode}\n            logoStyle={logoStyle}\n          />\n        ) : (\n          <SafeAreaView\n            edges={['left', 'right', ...(enableSafeAreaTopInset ? ['top' as Edge] : [])]}\n            style={commonStyles.stretch}\n          />\n        )}\n        <View style={commonStyles.container}>\n          <StickyHeaderScrollView\n            ref={scrollViewRef}\n            {...rest}\n            contentContainerStyle={contentContainerStyle}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScrollEndDrag={onScrollEndDrag}\n            onScroll={onScroll}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader}\n            renderTabs={renderTabs}\n            scrollEventThrottle={scrollEventThrottle}>\n            <Pager\n              {...pagerProps}\n              disableScrollToPosition={disableScrollToPosition}\n              initialPage={initialPage}\n              minScrollHeight={innerScrollHeight}\n              onChangeTab={handleChangeTab}\n              onScroll={handleScroll}\n              page={currentPage}\n              rememberTabScrollPosition={rememberTabScrollPosition}\n              scrollHeight={scrollHeight}\n              scrollRef={scrollViewRef}\n              scrollValue={scrollValue}>\n              {children}\n            </Pager>\n          </StickyHeaderScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n);\n"]}