{"version":3,"sources":["TabbedHeaderList.tsx"],"names":["TabbedHeaderListInner","props","ref","backgroundColor","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","logo","logoContainerStyle","logoResizeMode","logoStyle","nestedScrollEnabled","overScrollMode","renderHeaderBar","renderSectionFooter","renderSectionHeader","scrollEventThrottle","stickySectionHeadersEnabled","viewabilityConfig","itemVisiblePercentThreshold","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","onViewableItemsChanged","renderHeader","renderTabs","scrollViewRef","React","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","container","stretch","TabbedHeaderList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { SectionList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport type { Edge } from 'react-native-safe-area-context';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderSectionList } from '../../primitiveComponents/StickyHeaderSectionList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { TabbedHeaderListProps } from './TabbedHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useTabbedHeaderList } from './hooks/useTabbedHeader';\n\nfunction TabbedHeaderListInner<ItemT, SectionT>(\n  props: TabbedHeaderListProps<ItemT, SectionT>,\n  ref: React.ForwardedRef<SectionList<ItemT, SectionT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    logo,\n    logoContainerStyle,\n    logoResizeMode,\n    logoStyle,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeaderBar,\n    renderSectionFooter,\n    renderSectionHeader,\n    scrollEventThrottle = 16,\n    stickySectionHeadersEnabled = true,\n    viewabilityConfig = { itemVisiblePercentThreshold: 50 },\n    ...rest\n  } = props;\n  const {\n    onMomentumScrollEnd,\n    onScroll,\n    onScrollEndDrag,\n    onViewableItemsChanged,\n    renderHeader,\n    renderTabs,\n    scrollViewRef,\n  } = useTabbedHeaderList<ItemT, SectionT>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as SectionList<ItemT, SectionT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : logo ? (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          logo={logo}\n          logoContainerStyle={logoContainerStyle}\n          logoResizeMode={logoResizeMode}\n          logoStyle={logoStyle}\n        />\n      ) : (\n        <SafeAreaView\n          edges={['left', 'right', ...(enableSafeAreaTopInset ? ['top' as Edge] : [])]}\n          style={commonStyles.stretch}\n        />\n      )}\n      <View style={commonStyles.container}>\n        <StickyHeaderSectionList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          decelerationRate={decelerationRate}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          onScroll={onScroll}\n          overScrollMode={overScrollMode}\n          onViewableItemsChanged={onViewableItemsChanged}\n          renderHeader={renderHeader}\n          renderSectionFooter={renderSectionFooter}\n          renderSectionHeader={renderSectionHeader}\n          renderTabs={renderTabs}\n          scrollEventThrottle={scrollEventThrottle}\n          stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n          viewabilityConfig={viewabilityConfig}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype TabbedHeaderListType = <ItemT, SectionT>(\n  props: TabbedHeaderListProps<ItemT, SectionT> & React.RefAttributes<SectionList<ItemT>>\n) => React.ReactElement;\n\nexport const TabbedHeaderList = React.forwardRef(TabbedHeaderListInner) as TabbedHeaderListType;\n"]}