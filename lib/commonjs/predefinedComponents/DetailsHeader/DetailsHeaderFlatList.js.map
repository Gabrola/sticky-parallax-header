{"version":3,"sources":["DetailsHeaderFlatList.tsx"],"names":["DetailsHeaderFlatListInner","props","ref","backgroundColor","contentContainerStyle","data","decelerationRate","enableSafeAreaTopInset","keyExtractor","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeaderBar","renderItem","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","headerTitleContainerAnimatedStyle","renderHeader","scrollViewRef","onScroll","onScrollEndDrag","onMomentumScrollEnd","React","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","container","DetailsHeaderFlatList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { FlatList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderFlatList } from '../../primitiveComponents/StickyHeaderFlatList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { DetailsHeaderFlatListProps } from './DetailsHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useDetailsHeader } from './hooks/useDetailsHeader';\n\nfunction DetailsHeaderFlatListInner<ItemT>(\n  props: DetailsHeaderFlatListProps<ItemT>,\n  ref: React.ForwardedRef<FlatList<ItemT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    data,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    keyExtractor,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeaderBar,\n    renderItem,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    headerTitleContainerAnimatedStyle,\n    renderHeader,\n    scrollViewRef,\n    onScroll,\n    onScrollEndDrag,\n    onMomentumScrollEnd,\n  } = useDetailsHeader<FlatList<ItemT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as FlatList<ItemT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          headerTitleContainerAnimatedStyle={headerTitleContainerAnimatedStyle}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.container}>\n        <StickyHeaderFlatList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          data={data}\n          decelerationRate={decelerationRate}\n          keyExtractor={keyExtractor}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onScroll={onScroll}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader}\n          renderItem={renderItem}\n          scrollEventThrottle={scrollEventThrottle}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype DetailsHeaderFlatListType = <ItemT>(\n  props: DetailsHeaderFlatListProps<ItemT> & React.RefAttributes<FlatList<ItemT>>\n) => React.ReactElement;\n\nexport const DetailsHeaderFlatList = React.forwardRef(\n  DetailsHeaderFlatListInner\n) as DetailsHeaderFlatListType;\n"]}