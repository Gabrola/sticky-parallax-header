{"version":3,"sources":["withDetailsHeaderFlashList.tsx"],"names":["withDetailsHeaderFlashList","flashListComponent","StickyHeaderFlashList","React","forwardRef","props","ref","backgroundColor","decelerationRate","enableSafeAreaTopInset","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeaderBar","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","headerTitleContainerAnimatedStyle","renderHeader","scrollViewRef","onScroll","onScrollEndDrag","onMomentumScrollEnd","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","container"],"mappings":"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","sourcesContent":["import type { FlashList, FlashListProps } from '@shopify/flash-list';\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport type { StickyHeaderFlashListProps } from '../../primitiveComponents/StickyHeaderProps';\nimport { withStickyHeaderFlashList } from '../../primitiveComponents/withStickyHeaderFlashList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { DetailsHeaderFlashListProps } from './DetailsHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useDetailsFlashListHeader } from './hooks/useDetailsFlashListHeader';\n\nexport function withDetailsHeaderFlashList<ItemT>(\n  flashListComponent: React.ComponentClass<FlashListProps<ItemT>>\n) {\n  const StickyHeaderFlashList = withStickyHeaderFlashList(\n    flashListComponent as React.ComponentClass<FlashListProps<ItemT>>\n  ) as (\n    props: StickyHeaderFlashListProps<ItemT> & React.RefAttributes<FlashList<ItemT>>\n  ) => React.ReactElement;\n\n  return React.forwardRef<FlashList<ItemT>, DetailsHeaderFlashListProps<ItemT>>((props, ref) => {\n    const {\n      backgroundColor,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      leftTopIcon,\n      leftTopIconAccessibilityLabel,\n      leftTopIconOnPress,\n      leftTopIconTestID,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeaderBar,\n      rightTopIcon,\n      rightTopIconAccessibilityLabel,\n      rightTopIconOnPress,\n      rightTopIconTestID,\n      scrollEventThrottle = 16,\n      title,\n      titleStyle,\n      ...rest\n    } = props;\n    const {\n      headerTitleContainerAnimatedStyle,\n      renderHeader,\n      scrollViewRef,\n      onScroll,\n      onScrollEndDrag,\n      onMomentumScrollEnd,\n    } = useDetailsFlashListHeader<ItemT>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as FlashList<ItemT>);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            headerTitleContainerAnimatedStyle={headerTitleContainerAnimatedStyle}\n            leftTopIcon={leftTopIcon}\n            leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n            leftTopIconOnPress={leftTopIconOnPress}\n            leftTopIconTestID={leftTopIconTestID}\n            rightTopIcon={rightTopIcon}\n            rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n            rightTopIconOnPress={rightTopIconOnPress}\n            rightTopIconTestID={rightTopIconTestID}\n            title={title}\n            titleStyle={titleStyle}\n          />\n        )}\n        <View style={commonStyles.container}>\n          <StickyHeaderFlashList\n            ref={scrollViewRef}\n            {...rest}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onScroll={onScroll}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScrollEndDrag={onScrollEndDrag}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader}\n            scrollEventThrottle={scrollEventThrottle}\n          />\n        </View>\n      </Animated.View>\n    );\n  });\n}\n"]}